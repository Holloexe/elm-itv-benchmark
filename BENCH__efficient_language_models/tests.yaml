# String Manipulation
- description: "Bullet Summary"
  vars:
    prompt: |
      Create a summary of the following text in bullet points.

      Here's a simple yet powerful idea that can help you take a large step toward useful and valuable agentic workflows. I have to warn you, this is one of those things that sounds really obvious after you hear it because it's hiding in plain sight. The idea is simple; it's called the two-way prompt. So, what is this? Why is it useful? And how can it help you build better AI agent workflows? Two-way prompting happens all the time in real collaborative workspaces. You are effectively two or more agents prompting each other to drive outcomes. Two-way prompting happens all the time when you're at work, with friends, with family, online, in comment sections, on PR reviews. You ask a question; your co-worker responds. They ask a question; you respond. Now, let's double click into what this looks like for your agentic tools. Right in agentic workflows, you are the critical communication process between you and your AI agents that are aiming to drive outcomes. In most agentic workflows, we fire off one prompt or configure some system prompt, and that's it. But we're missing a ton of opportunity here that we can unlock using two-way prompts. Let me show you a concrete example with Ada. So, Ada, of course, is our proof of concept personal AI assistant. And let me just go ahead and kick off this workflow so I can show you exactly how useful the two-way prompt can be. Ada, let's create some example code.
  assert:
    - type: icontains-all
      value: ["agentic", "workflows", "two-way", "prompt"]
- description: "Bullet Each Sentence"
  vars:
    prompt: |
      Take the following text and for each sentence, convert it into a bullet point. Do not change the sentence. Maintain the punctuation. The punctuations '.!?' should trigger bullet points. Use - for the bullet point."

      Here's a simple yet powerful idea that can help you take a large step toward useful and valuable agentic workflows. I have to warn you, this is one of those things that sounds really obvious after you hear it because it's hiding in plain sight. The idea is simple; it's called the two-way prompt. So, what is this? Why is it useful? And how can it help you build better AI agent workflows? Two-way prompting happens all the time in real collaborative workspaces. You are effectively two or more agents prompting each other to drive outcomes.
  assert:
    - type: icontains-all
      value: 
        - "- Here's a simple yet powerful idea that can help you take a large step toward useful and valuable agentic workflows."
        - "- I have to warn you, this is one of those things that sounds really obvious after you hear it because it's hiding in plain sight."
        - "- The idea is simple; it's called the two-way prompt."
        - "- So, what is this?"
        - "- Why is it useful?"
        - "- And how can it help you build better AI agent workflows?"
        - "- Two-way prompting happens all the time in real collaborative workspaces."
        - "- You are effectively two or more agents prompting each other to drive outcomes."
- description: "Script to Markdown"
  vars:
    prompt: |
      Convert the following SCRIPT to markdown, follow the SCRIPTING_RULES.

      SCRIPTING_RULES
      - Create 1 h1 header with a interesting title.
      - Create 2 h2 sub headers, one for the summary and one for the details.
      - Each section should contain bullet points.
      - Start each section with a hook.
      - Use short paragraphs.
      - Use emojis to indicate the hooks.

      SCRIPT
      Here's a simple yet powerful idea that can help you take a large step toward useful and valuable agentic workflows. I have to warn you, this is one of those things that sounds really obvious after you hear it because it's hiding in plain sight. The idea is simple; it's called the two-way prompt. So, what is this? Why is it useful? And how can it help you build better AI agent workflows? Two-way prompting happens all the time in real collaborative workspaces. You are effectively two or more agents prompting each other to drive outcomes.
  assert:
    - type: icontains-all
      value: ["#", "##", "two-way", "prompt", "agentic", "workflows", "useful", "valuable", "better", "ai", "agent", "workflow", "prompting", "collaborative", "workspace", "two or more", "agents", "prompt each other", "outcome"]
    - type: javascript
      value: 'output.split("\n").length <= 100'
# Command Generation
- description: "Mac Bash Command: 'ls -a'"
  vars:
    prompt: "Mac: Bash: Concise: How do I list all hidden files in a directory?"
  assert:
    - type: icontains
      value: "ls -a"
- description: "Mac Bash Command: 'find . -name'"
  vars:
    prompt: "Mac: Bash: Concise: How do I recursively search a directory for a file by name?"
  assert:
    - type: icontains-all
      value: ["find", "-name"]
- description: "Complex Command: Git Branch Merge Conflict Resolution"
  vars:
    prompt: "Mac: Bash: Concise: How do I resolve merge conflicts in Git when trying to merge two branches?"
  assert:
    - type: icontains-all
      value: ["git", "merge", "conflict", "resolve", "git merge", "git status", "git add", "git commit"]
# Code Explanation
- description: "Python Generator Functions Explanation"
  vars:
    prompt: "Concisely explain how I can use generator functions in Python in less than 100 words."
  assert:
    - type: icontains-all
      value: ["generator", "function", "python", "yield", "iter"]
    - type: javascript
      value: 'output.split(" ").length <= 100'
- description: "Python Agent Routing Explanation"
  vars:
    prompt: | 
      Explain what the PYTHON_CODE does in 100 words or less.

      PYTHON_CODE
      def get_first_keyword_in_prompt(prompt: str):
        map_keywords_to_agents = {
            "bash,browser": run_bash_command_workflow, 
            "question": question_answer_workflow, 
            "hello,hey,hi": soft_talk_workflow, 
            "exit": end_conversation_workflow,
        }
        for keyword_group, agent in map_keywords_to_agents.items():
            keywords = keyword_group.split(",")
            for keyword in keywords:
                if keyword in prompt.lower():
                    return agent, keyword
        return None, None
  assert:
    - type: icontains-all
      value: ["python", "keyword", "prompt", "and", "found"]
    - type: javascript
      value: 'output.split(" ").length <= 100'
- description: "Python List Comprehensions Explanation"
  vars:
    prompt: "Concisely explain how I can use list comprehensions in Python in less than 100 words."
  assert:
    - type: icontains-all
      value: ["list", "comprehension", "python", "expression", "[", "]"]
    - type: javascript
      value: 'output.split(" ").length <= 100'
# Text Classification
- description: "SQL Natural Language Query Detection"
  vars:
    prompt: |
      Is the following BLOCK_OF_TEXT a SQL Natural Language Query (NLQ)? Respond Exclusively with 'yes' or 'no'.

      BLOCK_OF_TEXT

      select 10 users over the age of 21 with gmail address
  assert:
    - type: equals
      value: "yes"
- description: "Positive vs Negative Sentiment Detection"
  vars:
    prompt: |
      Determine if the sentiment of the following TEXT is positive or negative. Respond exclusively with 'positive' or 'negative'.

      TEXT

      I love sunny days there's nothing like getting out in nature
  assert:
    - type: equals
      value: "positive"
- description: "Detect Programming Language from Code Snippet"
  vars:
    prompt: |
      Identify the programming language used in the following CODE_SNIPPET:

      CODE_SNIPPET

      def example_function():
          print("Hello, World!")

  assert:
    - type: icontains
      value: "python"
